[
  {
    "id": "14af90ec476b80d5b34deec12c0d0dc3",
    "date": "26 Nov 24",
    "title": "get olarm working with homekit & g-home",
    "openGraph": "olarm.jpg",
    "openGraphSmall": "olarmSmall.jpg",
    "description": "Learn how to connect your Olarm communicator with HomeKit and Google Home using Homebridge. This step-by-step guide covers installation, plugin setup, and configuration to seamlessly integrate your Olarm alarm system with iOS and Android platforms."
  },
  {
    "id": "d9d9ff0975444fa191bd2a5a2e102c91",
    "date": "02 Aug 24",
    "title": "fix external camera flicker on mac",
    "openGraph": "flicker.jpg",
    "openGraphSmall": "flickerSmall.jpg",
    "description": "Learn how to fix external webcam flicker on Mac caused by fluorescent lighting. Discover an efficient solution using CameraController to adjust refresh rates without bloatware. Easy steps to improve your video quality."
  },
  {
    "id": "c406c93858294ee2988bb757a978c18b",
    "date": "04 Jul 24",
    "title": "a love letter to raycast",
    "openGraph": "raycastLarge.jpg",
    "openGraphSmall": "raycastSmall.jpg",
    "description": "Discover why Raycast is a must-have tool for efficient command management on your Mac. From window handling to Spotify controls and custom snippets, learn how Raycast transforms productivity. Explore key commands, window management tricks, and the power of personalized scripts. A must-read for those seeking seamless Mac navigation and advanced tool integration."
  },
  {
    "id": "44b611cc9aba42aa838b6d7f7524ac18",
    "date": "27 May 24",
    "title": "watchQuery to save the day",
    "openGraph": "largeWatchQuery.jpg",
    "openGraphSmall": "smallWatchQuery.jpg",
    "description": "In this blog post, the author delves into the implementation of Apollo GraphQL's `watchQuery()` to overcome skeleton loading across route navigation in a device management portal. They compare the currently implemented `useQuery()` method, which lacks caching and incurs loading delays, with the experimental `watchQuery()` approach that subscribes to cached data for faster interaction. The post outlines the pros and cons of `watchQuery()` implementation, discusses challenges like managing dependencies in `useEffect()`, and shares insights on stabilizing data sorting to reduce layout shifts in the user interface."
  },
  {
    "id": "490b99e822bc41c88cdb02a370023821",
    "date": "15 May 24",
    "title": "next.js app server improvements",
    "openGraph": "speedLarge.jpg",
    "openGraphSmall": "speedSmall.jpg",
    "description": "This post discusses significant improvements made to the Trinity website by changing how data fetching for blog posts and filtering of the data based on tags is done. Previously, data fetching was done inside a React Server Component (rsc) using URL slugs, which was slow. Now, data fetching is done in page.tsx, and data is passed as props, resulting in improvements. The changes involve calling getStoryData() once in page.tsx and using cached server data for subsequent calls, minimizing data fetching. Additional optimizations include prefetching and prioritizing certain links and images, reducing load time by roughly 75%. More investigation is needed, as Lighthouse scores do not reflect the improvements."
  },
  {
    "id": "ebfc2f63277a40a9aeefe50a85fb2ea2",
    "date": "21 Mar 24",
    "title": "notion as a blog post provider",
    "openGraph": "notion.jpg",
    "openGraphSmall": "notionSmall.jpg",
    "description": "Notion is used as a blog post creator/provider, leveraging react-notion-x for seamless integration with NextJS, offering real-time updates, auth handling, and efficient data storage in Supabase for optimal SEO with server-rendered metadata."
  },
  {
    "id": "0e05c93cd6af475ea91c7abf74f8959d",
    "date": "15 Feb 23",
    "title": "revamping our mobile experience",
    "openGraph": "mobile.jpg",
    "openGraphSmall": "mobileSmall.jpg",
    "description": "Revamping mobile app experience by optimizing screen space, reducing redundancy, following design principles like spacing consistency and visual hierarchy. Key changes: streamlined header, consolidated property info, expandable cards for actions, bottom navigation with icons, and better information architecture overall for improved usability."
  },
  {
    "id": "9f7ca94172d546f6a98df201a2ff9042",
    "date": "31 Oct 22",
    "title": "device management unit interaction page redesign",
    "openGraph": "dashboard.jpg",
    "openGraphSmall": "dashboardSmall.jpg",
    "description": "Redesigning the device management unit interaction page to optimize information architecture and visual hierarchy. Key changes: card/chip layout with heading text, icons, and descriptions to convey state quickly. Modular design for future expansions. Careful consideration of spacing, colors, editing UX. Ultimately, moving important info to the right for easy scanning, and separating main components side-by-side for reduced cognitive load following natural reading patterns. User testing validating initial design decisions after implementation."
  }
]
